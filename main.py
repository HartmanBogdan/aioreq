import asyncio
import logging
import aiohttp
import socket
import ssl
import datetime
import csv
from aiogram import Bot, Dispatcher, executor, types
from datetime import datetime
import config

"""import configparser


config = configparser.ConfigParser()
config.read('configfile.ini')"""

API_TOKEN = config.API_TOKEN
# Configure logging
logging.basicConfig(level=logging.INFO)

"""
set_time_up - —Ç–∞–π–º–µ—Ä –¥–ª—è –º–æ–Ω.—Å–∞–π—Ç—ñ–≤, –¥–∏–≤. help
set_time_ssl - —Ç–∞–π–º–µ—Ä –¥–ª—è SSL —Å–µ—Ä—Ç—Ñ. –¥–∏–≤. help
up_nacp - –ø–æ—á–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç—ñ–≤
ssl_check_nacp - –ø–æ—á–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ ssl
stop_ssl_check_nacp - –∑—É–ø–∏–Ω–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ ssl
stop_up_nacp - –∑—É–ø–∏–Ω–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç—ñ–≤
help - –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–ª—è —Ç–∞–π–º–µ—Ä—ñ–≤
"""

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

down_time = {  # –°–Æ–î–ò –ó–ê–ü–ò–°–£–Æ–¢–¨–°–Ø –ö–õ–Æ–ß–Ü(–°–ê–ô–¢–ò) –ó –î–Ü–ö–¢–ê nacp_sites –ê –ó–ù–ê–ß–ï–ù–ù–Ø –ö–õ–Æ–ß–Ü–í(–°–ê–ô–¢–Ü–í) - –ß–ê–° –ö–û–õ–ò
    # –í–û–ù–ò –°–¢–ê–õ–ò –ù–ï–î–û–°–¢–£–ü–ù–Ü, –©–û–ë –ü–û–¢–Ü–ú –ú–û–ñ–ù–ê –ë–£–õ–û –í–ò–†–ê–•–£–í–ê–¢–ò –î–ï–õ–¨–¢–£ –ß–ê–°–£
}

nacp_sites = config.nacp_sites
nacp_sites_ssl = config.nacp_sites_ssl
time_for_up = config.time_for_up
time_for_ssl = config.time_for_ssl
WhileLoopFlag = config.WhileLoopFlag
WhileLoopFlag_nacp = config.WhileLoopFlag_nacp

with open('logout.csv', 'a+', newline='', encoding='utf-8') as csvfile:
    fieldnames = ['–ù–∞–∑–≤–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó', '–†–µ–∑—É–ª—å—Ç–∞—Ç', '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: –î–î/–ú–ú/–†–† –ì–æ–¥/–•–≤/–°–µ–∫']
    logger = csv.DictWriter(csvfile, fieldnames=fieldnames)
    logger.writerow({'–ù–∞–∑–≤–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó': "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞", '–†–µ–∑—É–ª—å—Ç–∞—Ç': " LOADED",
                     '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: –î–î/–ú–ú/–†–† –ì–æ–¥/–•–≤/–°–µ–∫': (datetime.now()).strftime("%d:%m:%y %H:%M:%S")})


async def logger_writer(first_par, sec_par):
    with open('logout.csv', 'a+', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['–ù–∞–∑–≤–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó', '–†–µ–∑—É–ª—å—Ç–∞—Ç', '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: –î–î/–ú–ú/–†–† –ì–æ–¥/–•–≤/–°–µ–∫']
        logger = csv.DictWriter(csvfile, fieldnames=fieldnames)
        logger.writerow({'–ù–∞–∑–≤–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó': first_par, '–†–µ–∑—É–ª—å—Ç–∞—Ç': sec_par,
                         '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: –î–î/–ú–ú/–†–† –ì–æ–¥/–•–≤/–°–µ–∫': time_func().strftime("  %d.%m.%y %H:%M:%S")})


def time_func():
    print(type((datetime.now()).strftime("%d.%m.%y %H:%M:%S")))
    return datetime.now()


# TIME FORMAT - str - strftime("%d.%m.%y %H:%M:%S")

def strfdelta(tdelta, fmt="{days} –¥–Ω. {hours} –≥–æ–¥. {minutes} —Ö–≤ {seconds} —Å–µ–∫."):
    d = {"days": tdelta.days}
    d["hours"], rem = divmod(tdelta.seconds, 3600)
    d["minutes"], d["seconds"] = divmod(rem, 60)
    return fmt.format(**d)


@dp.message_handler(commands=['set_time_up'], content_types=['text'])
async def set_time_up(message):
    print("before set_time")
    global time_for_up
    message.text = str(message.text).split(" ")[1]
    if 0 < int(message.text) <= 1440:
        time_for_up = int(message.text) * 60
        print("set time - " + str(time_for_up))
        await bot.send_message(message.chat.id, "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –≤–∏–≤–æ–¥–æ–º UP_SITE –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - " + str(
            int(time_for_up / 60)) + " —Ö–≤.")
        await logger_writer(first_par="–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –≤–∏–≤–æ–¥–æ–º UP_SITE –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - " + str(
            int(time_for_up / 60)) + " —Ö–≤.", sec_par=" —Ñ—É–Ω–∫—Ü—ñ—è : set_time_up")
    else:
        await bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥ 0 –¥–æ 1440 —Ö–≤(–¥–æ–±–∞)")
        await logger_writer(first_par="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è: " + message.text +
                                      ", –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥ 0 –¥–æ 1440 —Ö–≤(–¥–æ–±–∞)", sec_par=" —Ñ—É–Ω–∫—Ü—ñ—è set_time_up")




@dp.message_handler(commands=['set_time_ssl'], content_types=['text'])
async def set_time_ssl(message):
    print("before set_time")
    global time_for_ssl
    message.text = str(message.text).split(" ")[1]
    if 0 < int(message.text) <= 1440:
        time_for_ssl = int(message.text) * 60
        print("set time - " + str(time_for_ssl))
        await bot.send_message(message.chat.id, "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –≤–∏–≤–æ–¥–æ–º SSL –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - " + str(
            int(time_for_ssl / 60)) + " —Ö–≤.")
        await logger_writer(first_par="–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –≤–∏–≤–æ–¥–æ–º SSL –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - ", sec_par=str(
            int(time_for_ssl / 60)) + " —Ö–≤. —Ñ—É–Ω–∫—Ü—ñ—è : set_time_ssl")

    else:
        await bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥ 0 –¥–æ 1440 —Ö–≤("
                                                "–¥–æ–±–∞)")
        await logger_writer(first_par="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è: " + message.text +
                                      ", –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥ 0 –¥–æ 1440 —Ö–≤(–¥–æ–±–∞)", sec_par=" —Ñ—É–Ω–∫—Ü—ñ—è set_time_ssl")


@dp.message_handler(commands=['stop_ssl_check_nacp'])
async def stop_ssl_check_nacp(message):
    global WhileLoopFlag
    WhileLoopFlag = False
    await bot.send_message(message.chat.id, text="–ó—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Ü–µ—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ SSL")
    await logger_writer(first_par="–ó—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Ü–µ—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ", sec_par=' —Ñ—É–Ω–∫—Ü—ñ—è: stop_ssl_check_nacp')


@dp.message_handler(commands=['stop_up_nacp'])
async def stop_up_nacp(message: types.Message):
    global WhileLoopFlag_nacp
    WhileLoopFlag_nacp = False

    await bot.send_message(message.chat.id, text="–ó—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Ü–µ—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ")
    await logger_writer(first_par="–ó—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Ü–µ—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ", sec_par='—Ñ—É–Ω–∫—Ü—Ü—ñ—è: stop_up_nacp')


@dp.message_handler(commands=['up_nacp'])
async def up_nacp(message):
    global nacp_sites
    global time_for_up
    global down_time
    three_times_errors = config.times_errors
    await bot.send_message(message.chat.id,
                           "–ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É UP_SITE (1 —Ä–∞–∑ –Ω–∞ " + str(int(time_for_up) / 60) + " —Ö–≤)")
    await logger_writer(first_par="–ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É UP_SITE ",
                        sec_par="(1 —Ä–∞–∑ –Ω–∞ " + str(int(time_for_up) / 60) + " —Ö–≤)")

    global WhileLoopFlag_nacp
    WhileLoopFlag_nacp = True
    while WhileLoopFlag_nacp is True:
        output = ""

        try:
            for key in nacp_sites:
                print(key)
                try:
                    hostname = key.split('/')[2]
                except IndexError:
                    HOST = str(key).split(":")
                    print(HOST)
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    result = sock.connect_ex((HOST[0], int(HOST[1])))
                    if result == 0:
                        if nacp_sites[key] is False:
                            nacp_sites[key] = True
                            deltatime = datetime.now() - down_time[key]
                            await bot.send_message(message.chat.id, "RECOVERY: üü¢\n" + str(key) + "\n" +
                                                   "Up since: " + time_func().strftime("%d.%m.%y %H:%M:%S") + "\n" +
                                                   "–ë—É–≤ –≤–∏–º–∫–Ω–µ–Ω–∏–π –ø—Ä–æ—Ç—è–≥–æ–º "
                                                   + strfdelta(deltatime))
                            await logger_writer(first_par=str(key),
                                                sec_par="RECOVERY: üü¢ –ë—É–≤ –≤–∏–º–∫–Ω–µ–Ω–∏–π –ø—Ä–æ—Ç—è–≥–æ–º: "
                                                        + strfdelta(deltatime))
                        print("Port is open")
                    else:
                        three_times_errors[key] += 1
                        if nacp_sites[key] is True:
                            down_time[key] = time_func()
                            if three_times_errors[key] == config.n_times_clause:
                                nacp_sites[key] = False
                                await bot.send_message(message.chat.id, "ALERT: DOWN üõë\n" +
                                                       str(key) + "\nDown since: " +
                                                       str(down_time[key].strftime("%d.%m.%y %H:%M:%S"))
                                                       + "\nReason: –Ω–µ–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞")
                                await logger_writer(first_par=str(key),
                                                    sec_par="ALERT: DOWN üõë Down since:  "
                                                            + str(down_time[key].strftime("%d.%m.%y %H:%M:%S   ")))
                                three_times_errors[key] = 0
                        print("Port is not open")
                    sock.close()
                    continue

                try:
                    async with aiohttp.ClientSession() as session:

                        try:
                            #TIMEOUT - 10 SE–°
                            async with session.get(url=key, timeout=10) as response:
                                print(str(response.status) + " " + hostname)
                                if response.status != 200 and response.status != 401:
                                    output += (hostname + "  status_code: " + str(response.status) + " FAIL\n")
                                    if nacp_sites[key] is True:
                                        nacp_sites[key] = False
                                        down_time[key] = time_func()
                                        await bot.send_message(message.chat.id, "ALERT: DOWN üõë\n" +
                                                               hostname + "\nDown since: " +
                                                               str(down_time[key].strftime("%d.%m.%y %H:%M:%S"))
                                                               + "\nReason: –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, "
                                                                 "–∞–ª–µ –æ—Ç—Ä–∏–º–∞–Ω–æ error.\n –ü–æ–º–∏–ª–∫–∞: " +
                                                               (str(response.status)))
                                        await logger_writer(first_par=hostname,
                                                            sec_par="ALERT: DOWN üõë Down since:  "
                                                            + str(down_time[key].strftime("%d.%m.%y %H:%M:%S   ")))

                                elif response.status == 200 or response.status == 401:
                                    if nacp_sites[key] is False:
                                        nacp_sites[key] = True
                                        deltatime = datetime.now() - down_time[key]
                                        await bot.send_message(message.chat.id,
                                                               "RECOVERY: üü¢\n" + hostname + "\nUp since: "
                                                               + time_func().strftime("%d.%m.%y %H:%M:%S") + "\n" +
                                                               "–ë—É–≤ –≤–∏–º–∫–Ω–µ–Ω–∏–π –ø—Ä–æ—Ç—è–≥–æ–º "
                                                               + strfdelta(deltatime))
                                        await logger_writer(first_par=hostname,
                                                            sec_par="RECOVERY: üü¢ –ë—É–≤ –≤–∏–º–∫–Ω–µ–Ω–∏–π –ø—Ä–æ—Ç—è–≥–æ–º: "
                                                                    + strfdelta(deltatime))

                        except asyncio.TimeoutError:
                            three_times_errors[key] += 1
                            if nacp_sites[key] is True:
                                down_time[key] = time_func()
                                if three_times_errors[key] == config.n_times_clause:
                                    nacp_sites[key] = False
                                    await bot.send_message(message.chat.id,
                                                           "ALERT: DOWN üõë\n" + hostname +
                                                           "\nReason: Connection Timeout. " + str(three_times_errors[key])
                                                           +" –Ω–µ–≤–¥–∞–ª—ñ —Å–ø—Ä–æ–±–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ–¥—Ä—è–¥.\nDown since: "
                                                           + str(down_time[key].strftime("%d.%m.%y %H:%M:%S")))
                                    await logger_writer(first_par=hostname,
                                                        sec_par="ALERT: DOWN üõë Connection Timeout. Down since: "
                                                                + str(down_time[key].strftime("%d.%m.%y %H:%M:%S   ")))
                                    three_times_errors[key] = 0

                            if (hostname + "  timeout fail \n") is not output:
                                output += (hostname + "  timeout fail \n")
                                print(output)
                except OSError:
                    three_times_errors[key] += 1
                    print(hostname + " OSError")
                    if nacp_sites[key] is True:
                        down_time[key] = time_func()
                        if three_times_errors[key] == config.n_times_clause:
                            nacp_sites[key] = False
                            await bot.send_message(message.chat.id,
                                                   "ALERT: DOWN üõë\n" + hostname +
                                                   "\nReason: OSError. " + str(three_times_errors[key])
                                                           +" –Ω–µ–≤–¥–∞–ª—ñ —Å–ø—Ä–æ–±–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ–¥—Ä—è–¥. \nDown since: " + str(
                                                       down_time[key].strftime("%d.%m.%y %H:%M:%S")) +
                                                   "\n(–Ω–µ–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞)")
                            await logger_writer(first_par=hostname, sec_par="ALERT: DOWN üõë OSError. Down since: " + str(
                                down_time[key].strftime("%d.%m.%y %H:%M:%S   ")))
                            three_times_errors[key] = 0


                            print(str(response.status) + "RESPONSE OSE EROOR STATUS")

        except TypeError:
            print(" TypeError")
        await asyncio.sleep(time_for_up)
    print(nacp_sites)
    await bot.send_message(message.chat.id, text="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ UP_SITE –∑—É–ø–∏–Ω–µ–Ω–∞")
    await logger_writer(first_par="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ UP_SITE –∑—É–ø–∏–Ω–µ–Ω–∞", sec_par=" —Ñ—É–Ω–∫—Ü—ñ—è up_nacp")


@dp.message_handler(commands=['ssl_check_nacp'])
async def ssl_check_nacp(message):
    global time_for_ssl
    await bot.send_message(message.chat.id,
                           "–ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É SSL-—Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤ (1 —Ä–∞–∑ –Ω–∞ " + str(int(time_for_ssl) / 60) + " —Ö–≤)")
    await logger_writer(
        first_par="–ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É SSL-—Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤ (1 —Ä–∞–∑ –Ω–∞ " + str(int(time_for_ssl) / 60) + " —Ö–≤)",
        sec_par=" —Ñ—É–Ω–∫—Ü—ñ—è ssl_check_nacp")

    global nacp_sites_ssl
    global WhileLoopFlag
    WhileLoopFlag = True
    while WhileLoopFlag is True:
        out = ""
        try:
            for x in nacp_sites_ssl:
                hostname = x.split('/')[2]

                try:
                    async with aiohttp.ClientSession() as session:
                        try:
                            ssl_date_fmt = r'%b %d %H:%M:%S %Y %Z'
                            context = ssl.create_default_context()
                            conn = context.wrap_socket(socket.socket(socket.AF_INET), server_hostname=hostname, )
                            # TIMEOUT WAS 3.0
                            conn.settimeout(3.0)
                            conn.connect((hostname, 443))
                            ssl_info = conn.getpeercert()
                            Exp_ON = datetime.strptime(ssl_info['notAfter'], ssl_date_fmt)
                            Days_Remaining = Exp_ON - datetime.utcnow()
                            conn.close()
                            daysR = int(str(Days_Remaining).split(" ")[0])
                            if daysR <= 40:
                                out += (hostname + " " + str(daysR) + " üõë\n")
                            else:
                                out += (hostname + " " + str(daysR) + " üü¢\n")

                        except asyncio.TimeoutError:
                            out += hostname + " - TIMEOUT FAIL\n"
                            print(out)
                            await logger_writer(first_par=hostname + " - TIMEOUT FAIL",
                                                sec_par=" —Ñ—É–Ω–∫—Ü—ñ—è ssl_check_nacp")
                except OSError:

                    out += hostname + " - OSErorr\n"
                    print(out)
                    await logger_writer(first_par=hostname + " - OSErorr", sec_par=" —Ñ—É–Ω–∫—Ü—ñ—è ssl_check_nacp")
        except TypeError:
            print("TypeError")
        await bot.send_message(message.chat.id, out)
        await asyncio.sleep(time_for_ssl)

    await bot.send_message(message.chat.id, text="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SSL –∑—É–ø–∏–Ω–µ–Ω–∞")
    await logger_writer(first_par="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SSL –∑—É–ø–∏–Ω–µ–Ω–∞", sec_par=" —Ñ—É–Ω–∫—Ü—ñ—è ssl_check_nacp")


@dp.message_handler(commands=["help"])
async def help(message):
    await bot.send_message(message.chat.id,
                           "/set_time_up N, –¥–µ N - —á–∞—Å –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö —è–∫–∏–π –≤–∫–∞–∑—É—î –≤—ñ–¥—Ä—ñ–∑–æ–∫ —á–∞—Å—É –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø—É "
                           "–¥–æ —Å–∞–π—Ç—É (default - 1).\n\n "
                           " –ü–û–¢–†–Ü–ë–ù–û –ü–†–û–ü–ò–°–£–í–ê–¢–ò –í–†–£–ß–ù–£, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥   '/set_time_up 50'   - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—É–¥–µ –∫–æ–∂–Ω–∏—Ö 50—Ö–≤ "
                           "(–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 1440—Ö–≤(24–≥–æ–¥–∏–Ω–∏).\n\n"
                           "/set_time_ssl N, –¥–µ N - —á–∞—Å –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö —è–∫–∏–π –≤–∫–∞–∑—É—î –≤—ñ–¥—Ä—ñ–∑–æ–∫ —á–∞—Å—É –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ SSL ("
                           "default - 1).\n\n "
                           " –ü–û–¢–†–Ü–ë–ù–û –ü–†–û–ü–ò–°–£–í–ê–¢–ò –í–†–£–ß–ù–£, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥   '/set_time_up 50'   - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—É–¥–µ –∫–æ–∂–Ω–∏—Ö 50—Ö–≤ "
                           "(–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 1440—Ö–≤(24–≥–æ–¥–∏–Ω–∏).\n\n"
                           "/up_nacp - –ø–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–∞–π—Ç—ñ–≤ –∫–æ–∂–Ω–∏—Ö N —Ö–≤–∏–ª–∏–Ω.\n\n"
                           "/ssl_check_nacp - –ø–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É SSL –∫–æ–∂–Ω–∏—Ö N —Ö–≤–∏–ª–∏–Ω.\n\n"
                           "/stop_ssl_check_nacp - –∑—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–≤—ñ—Ä–∫—É SSL.\n\n"
                           "/stop_up_nacp - –∑—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–∞–π—Ç—ñ–≤.\n\n"
                           )
    await logger_writer(first_par="help –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç", sec_par=" —Ñ—É–Ω–∫—Ü—ñ—è help")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
